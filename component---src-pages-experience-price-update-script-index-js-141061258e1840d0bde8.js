(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{y9Ez:function(e,t,a){"use strict";a.r(t);var n=a("q1tI"),i=a.n(n),r=(a("exiv"),a("Zttt")),o=a("vrFN"),h=function(){return i.a.createElement(i.a.Fragment,null,i.a.createElement("h2",null,"Price Update Python Script"),i.a.createElement("i",null,"Technology: Python, xlrd"),i.a.createElement("a",{href:"https://github.com/YozuBear/Price-Update-Script",target:"_blank"},"[code]"),i.a.createElement("p",null,"I wrote this python script for my father who works a sales. Every week, he updates the items in his excel spreadsheet with the new price lists compiled by his colleagues (also in excel format). Each of his colleague has their own style and format for the spreadsheet, and some items have the same IDs. Without unique IDs, the matching algorithm is doomed to become problematic. Therefore, my father invented his own naming system, adding a little ",i.a.createElement("i",null,"i")," or ",i.a.createElement("i",null,"o")," for the duplicated ones. This makes the matching ambiguous, so I implemented a weak matching and strong matching flag for this script. With strong matching, the price is only updated if they match exactly. On the other hand, weak matching first uses strong matching, then tries to match common prefix if strong matching does not find the item."))};t.default=function(){return i.a.createElement(r.a,null,i.a.createElement(o.a,{title:"Python Price Update Script"}),i.a.createElement("div",{className:"container"},h()))}}}]);
//# sourceMappingURL=component---src-pages-experience-price-update-script-index-js-141061258e1840d0bde8.js.map